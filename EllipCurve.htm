<!DOCTYPE html>
<html>
<head>
<title>A Guide to Transport Layer Security
 Chapter 3: Elliptic Curve Cryptography</title>

<style>
h1 {text-align: center;}
h5 {text-align: center;}
</style>

</head>
<body>

<h1>A Guide to Transport Layer Security<br>
Chapter 3: Elliptic Curve Cryptography</h1>
<h5>Last updated March 13, 2023.<br>
Copyright &copy; Eric Chauvin 2022 - 2023.</h5>


<p>The phrase Elliptic Curve goes back to
 at least the time of Leonhard Euler, who
 lived from 1707 to 1783.  It has to do with
 the arc length on an ellipse, which is
 an Elliptic Integral.  If you are studying
 the motion of planets, which move on an ellipse,
 then you would come to this problem of the
 arc length on an ellipse.  But in Cryptography
 an elliptic curve equation
 is done with Integers (Finite Fields).  It
 is Modular Arithmetic done on large integers.
</p>

<p>There is a history in Cryptography that leads
 up to what is in TLS 1.3.  An early
 algorithm for factoring large integers
 was Pollard's P - 1 algorithm, shown in
 the Pollard.cpp file.  That was from 1974.
 It led to Lenstra's Elliptic Curve Method for
 factoring.  That is shown in
 ECurve.cpp and EPoint.cpp.  RFC 6090 describes
 elliptic curve cryptography in general and the
 equations in EPoint.cpp come from that.  It
 describes Affine Coordinate Representation
 and also Projective Coordinates.
 Most of the CryptoGraphic
 source code is in the
 <a href="https://github.com/EricInArizona/CryptoBase">
 CryptoBase repository</a>.
</p>

<p>In 1987 Peter Montgomery wrote about what
 are now called Montgomery Curves, and that is
 shown in MCurve.cpp and MPoint.cpp.  In 2005
 Daniel J. Bernstein designed the 25519 curve
 and function
 that is used in TLS 1.3 for Diffie-Hellman
 key exchange.
</p>

<p>In MCurve.cpp you can see the scalarMult()
 function which is very similar to the
 scalarMult() function in ECurve.cpp.  But there
 is also the montLadder1() function which comes
 up with the same X coordinate, but it does it
 faster.  You can see in the test() function
 how they are both coming up with the same
 X coordinate.
</p>

<p>In the handshake (HandShake.cpp), the
 ClientHello message
 includes an extension for the Key Share, and
 that is shown in ExtenList.cpp.  That Key
 Share value is used in Diffie-Hellman key
 exchange, and it comes from the 32 byte value
 generated by the montLadder() function.
</p>

<p>Most of the code for Network protocols
 is in the
 <a href="https://github.com/EricInArizona/Network">
 Network repository</a>.
</p>


<br>
<p>References:
</p>

<p>Peter L. Montgomery (1987). "Speeding the
 Pollard and Elliptic Curve Methods of
Factorization". Mathematics of Computation.
 JSTOR 2007888.
</p>

<p>A good tutorial by Martin Kleppmann called
 <a href="https://martin.kleppmann.com/papers/curve25519.pdf">
 Implementing Curve25519/X25519: A
 Tutorial on Elliptic Curve Cryptography.</a>
</p>



<p><a href="https://github.com/EricInArizona">
Source Code</a>
</p>

<p><a href="https://ericinarizona.github.io/">
Main Page</a>
<br><br>
</p>


</body>
</html>
